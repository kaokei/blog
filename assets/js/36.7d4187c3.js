(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{503:function(t,a,s){"use strict";s.r(a);var r=s(20),e=Object(r.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"常用代理方案调研"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常用代理方案调研"}},[t._v("#")]),t._v(" 常用代理方案调研")]),t._v(" "),s("h2",{attrs:{id:"使用-charles-和-fiddle"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用-charles-和-fiddle"}},[t._v("#")]),t._v(" 使用 charles 和 fiddle")]),t._v(" "),s("p",[t._v("macos 常用 charles，windows 常用 fiddle。")]),t._v(" "),s("p",[t._v("macos 支持断点功能，可以修改请求以及返回值。并且支持 map local 和 map remote。")]),t._v(" "),s("p",[t._v("但是最大的缺陷是不能区分 options 请求和 GET/POST 请求。导致以上功能完全不能使用。")]),t._v(" "),s("h2",{attrs:{id:"建议使用-anyproxy"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#建议使用-anyproxy"}},[t._v("#")]),t._v(" 建议使用 anyproxy")]),t._v(" "),s("p",[t._v("因为 anyproxy 可以手动创建规则，可以通过编程来处理请求和返回值，这样就可以方便的区分 options 请求和 GET/POST 请求。")]),t._v(" "),s("div",{staticClass:"custom-block danger"},[s("p",{staticClass:"custom-block-title"},[t._v("警告")]),t._v(" "),s("p",[t._v("实际情况比较复杂。")]),t._v(" "),s("p",[t._v("比如在ios14，ios15的safari浏览器中都不能正常解析https请求。\n另外一台ios13则可以正常解析https请求，使用的也是safari浏览器。")]),t._v(" "),s("p",[t._v("比如在小米手机自带的浏览器中，就算手机已经安装了证书，该浏览器还是不信任证书，这个真是大无语事件。\n但是在小米手机上的UC浏览器中就可以正常访问。所以建议不要使用自带的浏览器。")])]),t._v(" "),s("p",[t._v("总体上来看还是可以使用的。")]),t._v(" "),s("p",[t._v("有想法做一个可视化界面来配置代理规则，而不用手动写代码了。")])])}),[],!1,null,null,null);a.default=e.exports}}]);